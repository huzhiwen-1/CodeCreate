using System;
using System.Text;
using System.Collections.Generic;
using HFramework.Utility;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using ${nameSpace}.Entity;
using ${nameSpace}.Repositories;
namespace  ${nameSpace}.Services
{
	public class $ClassName 
	{ 
	  
		/// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static $ClassNameEntity GetEntity(string id)
        {
		    if (string.IsNullOrEmpty(id))
            {
                throw new ParameNullException("ID不能为空");
            }
            return ${ClassRepository}.GetEntity(id);
        }
        /// <summary>
        /// 保存数据
        /// </summary>
        /// <param name="pc"></param>
        /// <returns></returns>
        public static bool Save$ClassNameEntity($ClassNameEntity obj,bool isNew,string userName="")
        {
		    if (obj==null)
            {
                throw new ParameNullException("实体不能为空");
            }
            if (isNew)
            {
                obj.${PrivatyKey} = MyString.NewGuid(); 
#foreach( $Property in $Propertys ) 
#if($Property.Name=="created_by")
				obj.${Property.Name} = userName;	 
#end##
#if($Property.Name=="created_on")
				obj.${Property.Name} =  DateTime.Now;	 
#end##
#if($Property.Name=="is_disable")
				obj.${Property.Name} =  0;	 
#end##
#if($Property.Name=="is_deleted")
				obj.${Property.Name} =  0;	 
#end##
#end## 
            } 
#foreach( $Property in $Propertys ) 
#if($Property.Name=="modify_by")
			obj.${Property.Name} = userName;	 
#end##
#if($Property.Name=="modify_on")
			obj.${Property.Name} =  DateTime.Now;	 
#end##   
#end##

            if (isNew)
            {
                return ${ClassRepository}.Insert(obj);
            }
            else
            {
                return ${ClassRepository}.Update(obj);
            } 
        }
		 /// <summary>
        /// 删除数据 
        /// </summary>
        /// <param name="ID"></param>
        /// <returns></returns>
		 public static bool Deleted(string id) 
        { 
            if (string.IsNullOrEmpty(id))
            {
                throw new ParameNullException("ID不能为空");
            }
            return ${ClassRepository}.Deleted(id);
        }

		 /// <summary>
        /// 校验唯一
        /// </summary>
        /// <param name="value">值</param>
        /// <param name="col">数据库列</param>
        /// <param name="id"></param>
        /// <returns></returns>
        public static bool CheckOnly(string value, string col, string id = "")
        {
            if (string.IsNullOrEmpty(value))
            {
                throw new ParameNullException("Value 不能为空");
            }
            if (string.IsNullOrEmpty(col))
            {
                throw new ParameNullException("col 不能为空");
            }
            return ${ClassRepository}.CheckOnly(value, col, id);
        }
		/// <summary>
        /// 分页查询
        /// </summary>
        /// <param name="Page"></param>
        /// <param name="PageSize"></param> 
        /// <param name="keyword"></param>
        /// <returns></returns>
        public static ResultList GetList(int Page, int PageSize,  string keyword = "")
        {
            int Skip = PagingHelper.GetSkip(Page, PageSize);
            return ${ClassRepository}.GetList(Skip, PageSize, keyword);
        }


   }
}